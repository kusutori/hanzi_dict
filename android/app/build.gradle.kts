// android/app/build.gradle.kts

plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

// ⭐️⭐️ 将 import 语句放在这里 ⭐️⭐️
// 确保它们在 plugins { ... } 块之后，
// 并且在 val keystorePropertiesFile = ... 这一行之前。
import java.util.Properties
import java.io.FileInputStream
import java.io.IOException // 为了 try-catch 块

// 这是你之前步骤中添加的用于加载属性的代码块。
// 它应该在 import 语句之后。
val keystorePropertiesFile = rootProject.file("../key.properties")
val keystoreProperties = Properties() // 现在可以直接使用 Properties()
if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(FileInputStream(keystorePropertiesFile)) // 以及 FileInputStream()
        println("Successfully loaded keystore properties from: ${keystorePropertiesFile.absolutePath}")
    } catch (e: IOException) { // 以及 IOException
        println("WARNING: Could not load keystore properties file '${keystorePropertiesFile.absolutePath}': ${e.message}")
    }
} else {
    println("WARNING: Keystore properties file not found at '${keystorePropertiesFile.absolutePath}'. Release build might not be signed or may fail.")
}

// 从这里开始是你文件的其余部分 (android { ... }, flutter { ... } 等)
// ... (保持你文件中 android { ... } 和 flutter { ... } 部分不变，除非之前指示修改过)
android {
    namespace = "com.example.hanzi_dict"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        applicationId = "com.example.hanzi_dict"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        create("release") {
            if (keystorePropertiesFile.exists() && keystoreProperties.containsKey("storeFile")) {
                storeFile = file(keystoreProperties.getProperty("storeFile"))
                storePassword = keystoreProperties.getProperty("storePassword")
                keyAlias = keystoreProperties.getProperty("keyAlias")
                keyPassword = keystoreProperties.getProperty("keyPassword")
                println("Release signing configuration loaded from keystore.properties.")
            } else {
                println("WARNING: Release signing configuration not fully loaded from keystore.properties. " +
                        "Ensure android/key.properties is correctly generated by the CI workflow " +
                        "and contains storeFile, storePassword, keyAlias, and keyPassword.")
            }
        }
    }

    buildTypes {
        getByName("release") {
            signingConfig = signingConfigs.getByName("release")
            // isMinifyEnabled = true
            // shrinkResources = true
            // proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
}

flutter {
    source = "../.."
}
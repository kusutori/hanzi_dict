// android/app/build.gradle.kts

// 1. 在文件顶部 (所有 plugins { ... } 块之后，android { ... } 块之前) 添加这部分
//    用于加载由 GitHub Actions 创建的 key.properties 文件。
//    这个 key.properties 文件应该位于 android/ 目录下。
val keystorePropertiesFile = rootProject.file("../key.properties") // 从 app/build.gradle.kts 指向 android/key.properties
val keystoreProperties = java.util.Properties()
if (keystorePropertiesFile.exists()) {
    try {
        keystoreProperties.load(java.io.FileInputStream(keystorePropertiesFile))
        println("Successfully loaded keystore properties from: ${keystorePropertiesFile.absolutePath}")
    } catch (e: java.io.IOException) {
        println("WARNING: Could not load keystore properties file '${keystorePropertiesFile.absolutePath}': ${e.message}")
    }
} else {
    println("WARNING: Keystore properties file not found at '${keystorePropertiesFile.absolutePath}'. Release build might not be signed or may fail.")
}

plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
}

android {
    namespace = "com.example.hanzi_dict" // 请确保这与你的项目一致
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        applicationId = "com.example.hanzi_dict" // 请确保这与你的项目一致
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    // 2. 修改 signingConfigs 块以使用 Kotlin DSL 并从 keystoreProperties 读取
    signingConfigs {
        create("release") { // 使用 create("release") 定义
            if (keystorePropertiesFile.exists() && keystoreProperties.containsKey("storeFile")) {
                // 从 keystoreProperties 加载值
                // key.properties 中的 storeFile=upload-keystore.jks (或你实际的文件名)
                // file(...) 会相对于 android/app/build.gradle.kts 解析这个路径
                storeFile = file(keystoreProperties.getProperty("storeFile"))
                storePassword = keystoreProperties.getProperty("storePassword")
                keyAlias = keystoreProperties.getProperty("keyAlias")
                keyPassword = keystoreProperties.getProperty("keyPassword")
                println("Release signing configuration loaded from keystore.properties.")
            } else {
                // 如果 key.properties 不存在或缺少必要条目，打印警告
                // 对于 CI 构建，如果 keystore 未配置，构建应该会因签名失败而中止
                println("WARNING: Release signing configuration not fully loaded from keystore.properties. " +
                        "Ensure android/key.properties is correctly generated by the CI workflow " +
                        "and contains storeFile, storePassword, keyAlias, and keyPassword.")
            }
        }
        // 你可能还想为 debug 保留默认的签名配置 (通常 Android Studio 会自动处理)
        // create("debug") { ... } // 通常不需要显式定义，除非有特殊需求
    }

    // 3. 修改 buildTypes 块以正确引用 release 签名配置
    buildTypes {
        getByName("release") {
            // 将 'release' 签名配置应用到 release 构建类型
            signingConfig = signingConfigs.getByName("release")

            // 你可以在这里添加其他 release 构建的特定配置，例如代码混淆：
            // isMinifyEnabled = true
            // shrinkResources = true // Requires isMinifyEnabled = true
            // proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")

            // TODO: 根据你的需要取消注释并配置上面的 ProGuard/R8 设置
        }
        // getByName("debug") {
            // debug 构建类型的特定配置 (如果有)
        // }
    }
}

flutter {
    source = "../.."
}

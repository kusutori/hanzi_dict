name: Flutter Android CI/CD Release APK

# 触发条件：当推送 v 开头的 tag 时触发，例如 v1.0.0, v0.5.2-alpha
on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_release_apk:
    name: Build and Release APK
    runs-on: ubuntu-latest # 使用 Ubuntu 最新版作为运行环境
    permissions:
      contents: write # 授予创建 Release 和上传附件的写入权限

    steps:
      - name:  Checkout code
        uses: actions/checkout@v4 # 使用最新版本的 checkout action

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Temurin (Eclipse Adoptium) 是推荐的 OpenJDK 发行版
          java-version: '21'     # Android 构建通常需要 Java 11 或 17，请根据项目需求调整

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0' # <--- 替换成你项目使用的 Flutter 版本 (例如: '3.19.6', '3.22.x')
          channel: 'stable'         # Flutter 的渠道 (stable, beta, dev, master)
          cache: true               # 启用 Flutter SDK 和 pub 依赖的缓存以加快构建速度

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Extract version from Git tag
        id: extract_version # 给这个步骤一个 ID，方便后续引用其输出
        run: |
          # github.ref_name 会给出触发工作流的 tag 名称，例如 'refs/tags/v1.0.5'
          # 我们需要从中提取 'v1.0.5' 或 '1.0.5'
          RAW_TAG=${{ github.ref_name }}
          echo "Raw Git tag: $RAW_TAG"

          # 移除 'refs/tags/' 前缀
          CLEAN_TAG=${RAW_TAG#refs/tags/}
          echo "Cleaned tag: $CLEAN_TAG"
          
          # 移除 'v' 前缀 (如果存在) 作为 versionName
          if [[ "$CLEAN_TAG" == v* ]]; then
            VERSION_NAME="${CLEAN_TAG:1}"
          else
            VERSION_NAME="$CLEAN_TAG"
          fi
          
          echo "Extracted Version Name: $VERSION_NAME"
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          
          # 对于 versionCode (Android 的 build number)，它必须是一个整数，并且每次发布到商店时都应该递增。
          # 一个简单的做法是使用 GitHub Actions 的运行编号 github.run_number。
          # 如果你的 tag 格式是例如 v1.0.5+10 (其中 +10 是 versionCode)，你需要更复杂的解析逻辑。
          # 这里我们使用 github.run_number 作为示例。
          VERSION_CODE=${{ github.run_number }}
          echo "Using Version Code (build number): $VERSION_CODE"
          echo "version_code=${VERSION_CODE}" >> $GITHUB_OUTPUT

      # ... (你现有的 Decode Android Keystore, Create key.properties 等步骤) ...

      - name: Decode Android Keystore
        id: decode_keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -z "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "ERROR: ANDROID_KEYSTORE_BASE64 secret is not set."
            exit 1 # 如果 secret 未设置，则构建失败
          else
            echo "Decoding Keystore into android/app/upload-keystore.jks..." # 确保使用 'upload-keystore.jks' 或你实际的文件名
            mkdir -p android/app # 确保目标目录存在
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks

            # 检查文件是否存在且非空
            if [ -s "android/app/upload-keystore.jks" ]; then
              echo "Keystore decoded successfully and is not empty."
              echo "Listing android/app/ directory contents:"
              ls -la android/app/
            else
              echo "ERROR: Keystore file 'android/app/upload-keystore.jks' was NOT created or is EMPTY after decoding."
              echo "Listing android/app/ directory contents (if any):"
              ls -la android/app/
              exit 1 # 如果文件未创建或为空，则构建失败
            fi
          fi

      - name: Create Android key.properties file
        # 此步骤从项目根目录运行
        env:
          # 将 secrets 作为环境变量传递，以便写入文件
          KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          echo "Attempting to create android/key.properties..."
          # 确保检查的文件名与上面解码时使用的文件名完全一致
          KEYSTORE_FILE_PATH="android/app/upload-keystore.jks"

          if [ -f "$KEYSTORE_FILE_PATH" ]; then
            echo "Keystore file found at $KEYSTORE_FILE_PATH."
            echo "Creating android/key.properties..."
            # key.properties 中的 storeFile 路径是相对于 android/app/ 目录的
            # (因为 android/app/build.gradle.kts 通常从该位置解析它)
            echo "storeFile=upload-keystore.jks" > android/key.properties # 注意这里的文件名
            echo "storePassword=$KEYSTORE_PASSWORD" >> android/key.properties
            echo "keyAlias=$KEY_ALIAS" >> android/key.properties
            echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
            echo "key.properties file created successfully in android/key.properties."
            echo "--- Contents of android/key.properties ---"
            cat android/key.properties
            echo "----------------------------------------"
          else
            echo "ERROR: Keystore file NOT FOUND at $KEYSTORE_FILE_PATH. Cannot create key.properties."
            echo "Listing contents for debugging:"
            echo "--- android/ directory ---"
            ls -la android/
            echo "--- android/app/ directory ---"
            ls -la android/app/
            exit 1 # 如果 keystore 文件找不到，则构建失败
          fi

      - name: Clean Flutter
        run: flutter clean

      # - name: Build Android Release APK
      #   run: flutter build apk --release
      #   # Flutter build apk --release 默认会查找 android/key.properties 来获取签名信息
      #   # 如果你的 build.gradle 配置不同，可能需要调整签名参数

      - name: Build Android Release APK
        run: |
          echo "Building APK with Version Name: ${{ steps.extract_version.outputs.version_name }} and Version Code: ${{ steps.extract_version.outputs.version_code }}"
          flutter build apk --release \
            --build-name="${{ steps.extract_version.outputs.version_name }}" \
            --build-number="${{ steps.extract_version.outputs.version_code }}"
          
          # 验证构建产物中的版本（可选，但有助于调试）
          # 注意：验证APK内部版本号比较复杂，通常不需要在CI中直接进行。
          # 主要依赖 flutter build 命令正确执行。

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的 token，用于 API 操作
        with:
          tag_name: ${{ github.ref_name }} # 使用触发 workflow 的 tag 名称
          release_name: Release ${{ github.ref_name }}
          body: | # Release 的描述信息，可以自定义
            Automated release for version ${{ github.ref_name }}
            Includes:
            - Android APK
          draft: false      # 设置为 false 会直接发布，true 则创建草稿
          prerelease: false # 如果是预发布版本可以设置为 true

      - name: Upload Android APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 从上一步 create_release 获取上传 URL
          asset_path: build/app/outputs/flutter-apk/app-release.apk # APK 文件的路径
          asset_name: hanzi_dict-${{ github.ref_name }}.apk # <--- 自定义你的 APK 文件名，例如 myapp-v1.0.0.apk
          asset_content_type: application/vnd.android.package-archive # APK 的 MIME 类型

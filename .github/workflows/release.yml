name: Flutter Android CI/CD Release APK

# 触发条件：当推送 v 开头的 tag 时触发，例如 v1.0.0, v0.5.2-alpha
on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_release_apk:
    name: Build and Release APK
    runs-on: ubuntu-latest # 使用 Ubuntu 最新版作为运行环境

    steps:
      - name:  Checkout code
        uses: actions/checkout@v4 # 使用最新版本的 checkout action

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Temurin (Eclipse Adoptium) 是推荐的 OpenJDK 发行版
          java-version: '21'     # Android 构建通常需要 Java 11 或 17，请根据项目需求调整

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0' # <--- 替换成你项目使用的 Flutter 版本 (例如: '3.19.6', '3.22.x')
          channel: 'stable'         # Flutter 的渠道 (stable, beta, dev, master)
          cache: true               # 启用 Flutter SDK 和 pub 依赖的缓存以加快构建速度

      - name: Get Flutter dependencies
        run: flutter pub get

      # 可选：运行测试以确保代码质量
      # - name: Run Flutter tests
      #   run: flutter test

      - name: Decode Android Keystore
        id: decode_keystore
        # 确保你已经在 GitHub Secrets 中设置了这些值
        # ANDROID_KEYSTORE_BASE64: Keystore 文件内容的 Base64 编码字符串
        # ANDROID_KEYSTORE_PASSWORD: Keystore 的密码
        # ANDROID_KEY_ALIAS: 密钥的别名
        # ANDROID_KEY_PASSWORD: 密钥的密码
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -z "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "ANDROID_KEYSTORE_BASE64 secret is not set. Skipping keystore decoding."
            # 如果没有 keystore，后续的 release build 可能会失败或构建成 debug 版本
            # 你可以根据需要决定是否让 workflow 在此失败
            # exit 1
          else
            echo "Decoding Keystore..."
            echo "$ANDROID_KEYSTORE_BASE64" | base64 --decode > android/app/upload-keystore.jks
            echo "Keystore decoded successfully."
          fi

      - name: Create Android key.properties file
        # 这个步骤创建 android/key.properties 文件，build.gradle 会使用它来签名应用
        # 确保你的 android/app/build.gradle 文件配置了从这些属性读取签名信息
        run: |
          if [ -f "android/app/upload-keystore.jks" ]; then
            echo "storeFile=upload-keystore.jks" > android/key.properties
            echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
            echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
            echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
            echo "key.properties file created successfully."
          else
            echo "Keystore file not found. Skipping key.properties creation."
            # 如果没有 keystore，后续的 release build 可能会失败或构建成 debug 版本
          fi
        working-directory: android # 确保在 android 目录下创建 key.properties

      - name: Clean Flutter
        run: flutter clean

      - name: Build Android Release APK
        run: flutter build apk --release
        # Flutter build apk --release 默认会查找 android/key.properties 来获取签名信息
        # 如果你的 build.gradle 配置不同，可能需要调整签名参数

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的 token，用于 API 操作
        with:
          tag_name: ${{ github.ref_name }} # 使用触发 workflow 的 tag 名称
          release_name: Release ${{ github.ref_name }}
          body: | # Release 的描述信息，可以自定义
            Automated release for version ${{ github.ref_name }}
            Includes:
            - Android APK
          draft: false      # 设置为 false 会直接发布，true 则创建草稿
          prerelease: false # 如果是预发布版本可以设置为 true

      - name: Upload Android APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 从上一步 create_release 获取上传 URL
          asset_path: build/app/outputs/flutter-apk/app-release.apk # APK 文件的路径
          asset_name: hanzi_dict-${{ github.ref_name }}.apk # <--- 自定义你的 APK 文件名，例如 myapp-v1.0.0.apk
          asset_content_type: application/vnd.android.package-archive # APK 的 MIME 类型
